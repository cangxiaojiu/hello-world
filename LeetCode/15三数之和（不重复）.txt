给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。

注意：答案中不可以包含重复的三元组。


int** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){
    dobble(nums,numsSize);
    int renums[2];
    int r=1,l=numsSize;
    for(int i=0;i<numsSize-1;i++){
        while(r<l){
        if(nums[i]+nums[r]+nums[l]==0&&nums[i]!=nums[r]&&nums[r]!=nums[l]){
            renums[1]=nums[i];
            renums[2]=nums[r];
            renums[3]=nums[l];
            return renums;
        }
        else if(nums[i]+nums[r]+nums[l]>0){
            l--;
        }
        else if(nums[i]+nums[r]+nums[l]<0){
            r++;
        }
     }
    }   
};
 int dobble(int *nums,;int numsSize){
     for(int i=0;i<nmsSize;i++){
        for(int j=0;j<numsSize-1-i;j++){
            if(nums[j]>nums[j+1]){
               int temp=0;
               temp=nums[j];
               nums[j]=nums[j+1];
               nums[j+1]=temp; 
            }    
        }
    }
    return nums;
 }


good

int comp(const void *a,const void *b)
{
    return *(int *)a - *(int *)b;
}

int** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){
    if (numsSize == 0) {
        return 0;
    }
    int **ret = (int **)malloc(sizeof(int *) * (numsSize + 1));
    *returnSize = 0;
    int left = 0;
    int right = numsSize - 1;
    int target = 0;
    
    *returnColumnSizes = malloc(sizeof(int) * (numsSize + 1));
    qsort(nums, numsSize, sizeof(int), comp);
    ret[*returnSize] = malloc(sizeof(int) * 3);

    while (left + 1 < right) {
        int i = left + 1;
        int j = right;
        target = 0 - nums[left];
        while (i < j) {
            if (nums[i] + nums[j] < target) {
                i++;
            } 
            else if (nums[i] + nums[j] > target) {
                j--;
            }
             else {
                ret[*returnSize][0] = nums[left];
                ret[*returnSize][1] = nums[i];
                ret[*returnSize][2] = nums[j];
                (*returnColumnSizes)[*returnSize] = 3;
                (*returnSize)++;
                ret[*returnSize] = malloc(sizeof(int) * 3);

                while(nums[i] == nums[++i] && i < j) {}
                while(nums[j] == nums[--j] && i < j) {}
            }
        }
        while(nums[left] == nums[++left] && left + 1 < right) {}
    }
    
    return ret;
}